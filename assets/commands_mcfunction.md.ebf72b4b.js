import{r as n,o as e,c as s,a,d as t}from"./404.md.9ac6c6e7.js";const o='{"title":"Understanding .mcfunction","description":"","frontmatter":{"title":"Understanding .mcfunction"},"headers":[{"level":2,"title":"Running functions through tick.json","slug":"running-functions-through-tick-json"},{"level":3,"title":"Creating tick.json","slug":"creating-tick-json"},{"level":3,"title":"Known Issues","slug":"known-issues"}],"relativePath":"commands/mcfunction.md","lastUpdated":1636024596788}',i={},c=t('<p><code>mcfunction</code> files are stored in your BP as <code>BP/functions/my_function.mcfunction</code>. You can add as many functions as you like.</p><p>Functions are used to group multiple Minecraft <code>commands</code> (such as <code>/say</code> or <code>/teleport</code>) into manageable chunks (or functions). Function files do not begin with <code>/</code>.</p><p>Example:</p><div class="language-"><pre><code>tag @s add dev\ngamemode creative\neffect @s night_vision 100000 1 true\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Functions can be executed in-game by typing <code>/function name_of_function</code>. This will execute all the commands in the function file, all in a single tick. Nested functions will also run in the same tick as the parent function.</p><p>Function files can be nested, for example: <code>BP/functions/teleport/home.mcfunction</code> will create a new function called <code>teleport/home</code>, which can be called in game like <code>/function teleport/home</code>.</p><p>Functions can be reloaded from the file without leaving the game with the <code>/reload</code> command.</p><h2 id="running-functions-through-tick-json"><a class="header-anchor" href="#running-functions-through-tick-json" aria-hidden="true">#</a> Running functions through tick.json</h2><p><code>tick.json</code> is a server-side file located as <code>BP/functions/tick.json</code> that lets you execute function files.</p><p>Functions will be run for each tick as if placed in a repeating command block.</p><h3 id="creating-tick-json"><a class="header-anchor" href="#creating-tick-json" aria-hidden="true">#</a> Creating tick.json</h3><p>Create a file called tick.json in your root function folder. The format is this:</p>',12),r=t('<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n\t<span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\t\t<span class="token string">&quot;function_file_name_one&quot;</span><span class="token punctuation">,</span>\n\t\t<span class="token string">&quot;function_file_name_two&quot;</span>\n\t<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="known-issues"><a class="header-anchor" href="#known-issues" aria-hidden="true">#</a> Known Issues</h3><p>While this is a valuable file when you&#39;re trying to stray away from using repeating command blocks in-game, it&#39;s known for executing function files before the world has fully loaded in. This might cause unintended command behavior and crashes, and it&#39;s recommended to wait for a more official release of this file.</p>',3);i.render=function(t,o,i,l,u,d){const p=n("CodeHeader");return e(),s("div",null,[c,a(p),r])};export default i;export{o as __pageData};
