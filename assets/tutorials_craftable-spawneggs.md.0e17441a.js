import{r as a,o as n,c as s,b as t,w as e,d as p,a as o}from"./app.8095dec7.js";const r='{"title":"Craftable Spawn-Eggs","description":"","frontmatter":{"layout":"page","title":"Craftable Spawn-Eggs","parent":"Tutorials"},"headers":[{"level":2,"title":"Shapeless recipe example","slug":"shapeless-recipe-example"}],"relativePath":"tutorials/craftable-spawneggs.md","lastUpdated":1617466726945}',c={},i=t("h1",{id:"using-molang-to-create-craftable-spawn-eggs"},[t("a",{class:"header-anchor",href:"#using-molang-to-create-craftable-spawn-eggs","aria-hidden":"true"},"#"),p(" Using MoLang to create craftable spawn-eggs")],-1),u=p("Beginner"),l=o('<p>Minecraft Bedrock 1.16 introduced the ability to use MoLang expressions in the <code>data</code> field of recipe results. We can use the <code>query.get_actor_info_id</code> function to get the runtime integer ID of a given entity.</p><h2 id="shapeless-recipe-example"><a class="header-anchor" href="#shapeless-recipe-example" aria-hidden="true">#</a> Shapeless recipe example</h2><p>This recipe will convert a piece of gunpowder to a creeper spawn egg.</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.13.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;minecraft:recipe_shapeless&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo:bar&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">&quot;crafting_table&quot;</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;ingredients&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token string">&quot;minecraft:gunpowder&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;result&quot;</span><span class="token operator">:</span>\n            <span class="token punctuation">{</span>\n                <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spawn_egg&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;query.get_actor_info_id(&#39;minecraft:creeper&#39;)&quot;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>This method works for custom entities as well - just replace <code>minecraft:creeper</code> with the identifier of your entity.</p><p>If you want your entity to drop its spawn-egg instead, check out the <a href="/tutorials/egg-drops.html">tutorial</a> on spawn-egg drops.</p>',6);c.render=function(p,o,r,c,g,d){const k=a("Label");return n(),s("div",null,[i,t(k,{color:"green"},{default:e((()=>[u])),_:1}),l])};export default c;export{r as __pageData};
