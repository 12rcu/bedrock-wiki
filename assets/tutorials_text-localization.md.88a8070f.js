import{r as e,o as t,c as o,a,w as i,b as n,d as r}from"./404.md.1a174489.js";const s='{"title":"Text Localization","description":"","frontmatter":{"layout":"page","title":"Text Localization","parent":"Tutorials"},"headers":[{"level":2,"title":"What is localization?","slug":"what-is-localization"},{"level":2,"title":"Why would you want to use localization?","slug":"why-would-you-want-to-use-localization"},{"level":2,"title":"A quick example","slug":"a-quick-example"},{"level":2,"title":"Writing on a sign","slug":"writing-on-a-sign"},{"level":2,"title":"Writing a book","slug":"writing-a-book"},{"level":2,"title":"Make an NPC talk","slug":"make-an-npc-talk"},{"level":2,"title":"Localize the Actionbar","slug":"localize-the-actionbar"},{"level":2,"title":"Localize Titles and Subtitles","slug":"localize-titles-and-subtitles"},{"level":2,"title":"Using player names with localization","slug":"using-player-names-with-localization"},{"level":2,"title":"Using scoreboards with localization","slug":"using-scoreboards-with-localization"},{"level":2,"title":"Quick reference","slug":"quick-reference"},{"level":2,"title":"External links","slug":"external-links"},{"level":2,"title":"Credits","slug":"credits"}],"relativePath":"tutorials/text-localization.md","lastUpdated":1623311972566}',l={},u=a("h1",{id:"text-localization-tips-tricks"},[a("a",{class:"header-anchor",href:"#text-localization-tips-tricks","aria-hidden":"true"},"#"),n(" Text Localization Tips & Tricks")],-1),c=n("Beginner"),d=r('<h2 id="what-is-localization"><a class="header-anchor" href="#what-is-localization" aria-hidden="true">#</a> What is localization?</h2><p>Language localization is the process of translating a game or software product for a specific country or region.</p><p>As an example let&#39;s take the <code>Gold Ingot</code> from Minecraft. In the code of the game, the developers referred to it as <code>item.gold_ingot.name</code>. That&#39;s not a very nice way to call it all the time is it? So for each language that has a Minecraft translation, the developers created a translation(or Localization) file that assigns the proper name to that <code>item.gold_ingot.name</code>.</p><p>For example for US English they created a <code>en_US.lang</code> file and inside it you can find the line: <code>item.gold_ingot.name=Gold Ingot</code> For Spanish we have the <code>es_ES.lang</code> file and inside that one you can find the line: <code>item.gold_ingot.name=Lingote de oro</code> For French Canadian we have <code>fr_CA.lang</code> and the line: <code>item.gold_ingot.name=Lingot d&#39;or</code></p><p>You get the point! For more information about these localization files I recommend our <a href="https://wiki.bedrock.dev/concepts/lang" target="_blank" rel="noopener noreferrer">.lang</a> section.</p><h2 id="why-would-you-want-to-use-localization"><a class="header-anchor" href="#why-would-you-want-to-use-localization" aria-hidden="true">#</a> Why would you want to use localization?</h2><p>The boring and responsible answer is that you want to use localization so that your project can be easily translated into many languages and reach a much larger audience.</p><p>The real answer: because like many of us you&#39;re lazy! Made a spelling mistake? You don&#39;t even need to open the game, just open the <code>.lang</code> file and fix it! That&#39;s it! DONE! You don&#39;t have to break and replace signs, you don&#39;t have to re-write books, you don&#39;t have to find that one command for that one NPC that said that one thing.</p><h2 id="a-quick-example"><a class="header-anchor" href="#a-quick-example" aria-hidden="true">#</a> A quick example</h2><p>Ok, before we get too bored, let&#39;s do a fast example to peak your curiosity! Go inside your Resource Pack and find the <code>texts</code> folder. Here you should already see a <code>en_US.lang</code> file. This is a simple text file that you can open with Notepad. If you can&#39;t find it, just create a new <code>.txt</code> file and rename it to <code>en_US.lang</code>.</p><p>Inside the file, find the line with <code>item.gold_ingot.name=Gold Ingot</code>. If you can&#39;t find it just write it yourself. Now change it to <code>item.gold_ingot.name=Shiny Yellow Ingot</code> and save the file.</p><p>Exit and re-enter your world and hover over a Gold Ingot, it should now say Shiny Yellow Ingot. Pretty cool isn&#39;t it?!</p><h2 id="writing-on-a-sign"><a class="header-anchor" href="#writing-on-a-sign" aria-hidden="true">#</a> Writing on a sign</h2><p>Let&#39;s say you want to have a sign in your world that says <code>House of terrors</code> but you want to make sure your French friend Gaston sees the French translation on that sign: <code>Maison des terreurs</code>. He has his game in French so that should be easy.</p><p>Inside your Resource Pack find the <code>texts</code> folder and make sure you have inside it the <code>en_US.lang</code> file and the <code>fr_FR.lang</code> file. If not, just make 2 simple <code>.txt</code> files and rename them.</p><p>As with our quick example we need a code for this text, let&#39;s go with <code>sign.house_of_terrors</code>. Now let&#39;s paste this code inside the 2 files and assign the translation to each one:<br> Inside <code>en_US.lang</code> write a new line with <code>sign.house_of_terrors=House of terrors</code><br> Inside <code>fr_FR.lang</code> write a new line with <code>sign.house_of_terrors=Maison des terreurs</code></p><p>Before we get inside the game, do a quick restart of Minecraft just to make sure the game registered the new <code>.lang</code> files.</p><p>Now for the most complicated part! Put down a sign and paste this inside it:<br><code>{&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;sign.house_of_terrors&quot;}]}</code></p><p>When you exit the sign interface, you should see <code>House of terrors</code> written on it. AMAZING!!! And your friend should see <code>Maison des terreurs</code>.</p><p>As you can see we can&#39;t just put <code>sign.house_of_terrors</code> inside the sign and hope Minecraft understands what we mean. We have to wrap our code inside a special formula.</p><h2 id="writing-a-book"><a class="header-anchor" href="#writing-a-book" aria-hidden="true">#</a> Writing a book</h2><ul><li>This book will have 2 pages with multiple paragraphs on each page.</li></ul><p>Getting to some serious stuff now! Let&#39;s say you want to write a fancy story inside a book, and make sure your friend from Italy can read it in his native tongue.</p><p>As per usual go inside your Resource Pack and find the <code>texts</code> folder. Make sure you have in there the <code>en_US.lang</code> file and the <code>it_IT.lang</code> file. If not, just make 2 simple <code>.txt</code> files and rename them.</p><p>Each page in our book will have a different localization code, let&#39;s say <code>book.mystory.page1</code> and <code>book.mystory.page2</code>.</p><p>For the first page we want to show something like this:</p><div class="language-"><pre><code>Now this is the story all about how\n\nMy life got flipped, turned upside down\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>For the second page we want to show this:</p><div class="language-"><pre><code>And I&#39;d like to take a minute just sit right there\n\nI&#39;ll tell you how I became the prince\n\nof a town called Bel-air\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Unfortunately we can&#39;t put the text like that inside our <code>.lang</code> files. Everything has to be on a single row/line. To do that we need to tell Minecraft <em>&quot;Listen, I have a line here for you to display but I want you to add some line breaks inside it&quot;</em>. We do that by putting a <code>%1</code> instead of a new line.</p><p>For the sake of learning let&#39;s transform our text step by step:</p><ul><li><strong>Step 1</strong>: replace all new lines with a <code>%1</code>: <ul><li>First page:<div class="language-"><pre><code>Now this is the story all about how%1\n%1\nMy life got flipped, turned upside down\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>Second page:<div class="language-"><pre><code>And I&#39;d like to take a minute just sit right there%1\n%1\nI&#39;ll tell you how I became the prince%1\n%1\nof a town called Bel-air\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li><strong>Step 2</strong>: make it all one row: <ul><li>First page:<div class="language-"><pre><code>Now this is the story all about how%1%1My life got flipped, turned upside down\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></li><li>Second page:<div class="language-"><pre><code>And I&#39;d like to take a minute just sit right there%1%1I&#39;ll tell you how I became the prince%1%1of a town called Bel-air\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></li></ul></li></ul><p>Now we&#39;re getting somewhere! Let&#39;s put it all together with our code and see how this whole text would fit inside out <code>.lang</code> files:<br><strong>en_US.lang</strong></p><div class="language-"><pre><code>book.mystory.page1=Now this is the story all about how%1%1My life got flipped, turned upside down\nbook.mystory.page2=And I&#39;d like to take a minute just sit right there%1%1I&#39;ll tell you how I became the prince%1%1of a town called Bel-air\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>it_IT.lang</strong></p><div class="language-"><pre><code>book.mystory.page1=Ora questa è tutta la storia su come%1%1La mia vita è stata capovolta, capovolta\nbook.mystory.page2=E mi piacerebbe prendere un minuto seduto proprio lì%1%1Ti dirò come sono diventato il principe%1%1di una città chiamata Bel-air\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Like we did before, let&#39;s do a complete restart of Minecraft just to make sure the game registered the new <code>.lang</code> files.</p><p>Now go inside the game, open a book to write in and paste this on the first page:<br><code>{&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;book.mystory.page1&quot;,&quot;with&quot;:[&quot;\\n&quot;]}]}</code><br> And this on the second page:<br><code>{&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;book.mystory.page2&quot;,&quot;with&quot;:[&quot;\\n&quot;]}]}</code></p><p>When you click outside the pages you should see the story just like we wanted it to show. So again, like with the sign, we can&#39;t just paste <code>book.mystory.page1</code> and hope it works. We have to wrap our code inside a special formula and tell minecraft <em>&quot;I want you to replace each <code>%1</code> with a new line&quot;</em></p>',39),h=n("Intermediate"),p=r('<ul><li>Making the next few examples <strong>Intermediate</strong> level because we&#39;re going to use commands and stop mentioning all the restarts you have to do and what files to create.</li></ul><h2 id="make-an-npc-talk"><a class="header-anchor" href="#make-an-npc-talk" aria-hidden="true">#</a> Make an NPC talk</h2><p>Usually when we want an NPC to talk we have to name it and use the <code>/say</code> or <code>/tell</code> commands. For localization purposes we are going to use the <code>/tellraw</code> command. This allows us to use that special formula to tell Minecraft we want something translated.</p><p>For this example I want Bob the NPC to say hi to me. As usual we&#39;ll have a code in our <code>.lang</code> file:<br><code>npcdialogue.bob.msg1=Hey there stranger!</code><br> You know what, let&#39;s make it even more fancy! Let&#39;s have Bob&#39;s name in colors for this one:<br><code>npcdialogue.bob.msg1=&lt;§6Bob§r&gt; Hey there stranger!</code></p><ul><li>See the <a href="https://minecraft.gamepedia.com/Formatting_codes" target="_blank" rel="noopener noreferrer">official wiki</a> for info on text formatting</li></ul><p>Now let&#39;s create that command:<br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.bob.msg1&quot;}]}</code></p><p>Go ahead and run it! Since we used the <code>@a</code> selector, Bob is saying hi to all the players. If we want him to say hi only to the closes player we have to extend the command a little bit and also replace <code>@a</code> with <code>@p</code>.<br> So the updated command would be:<br><code>/execute @e[name=Bob] ~~~ tellraw @p {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.bob.msg1&quot;}]}</code><br> This new command is saying <em>&quot;Find the entity called Bob and run the tellraw command for the closest player to that location.&quot;</em></p><h2 id="localize-the-actionbar"><a class="header-anchor" href="#localize-the-actionbar" aria-hidden="true">#</a> Localize the Actionbar</h2><p>So far we&#39;ve put text on a sign, in a book and in the chat. Let&#39;s expand our horizons with the Actionbar. You know how you can turn on subtitles for movies? That&#39;s exactly what the Actionbar is! The place above your Hotbar where you can put some text!</p><p>Usually to show text in the Actionbar we do a quick <code>/title @a actionbar &quot;Hello there!&quot;</code> command. For localization we are going to use the <code>/titleraw</code> command. Let&#39;s do a quick example!</p><p>Inside the <code>.lang</code> file:<br><code>actionbar.status.gamemode=You are now in Survival Mode</code><br> The final command:<br><code>/titleraw @a actionbar {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;actionbar.status.gamemode&quot;}]}</code></p><h2 id="localize-titles-and-subtitles"><a class="header-anchor" href="#localize-titles-and-subtitles" aria-hidden="true">#</a> Localize Titles and Subtitles</h2><p>This is one of the best things in terms of localization since fried rice! So listen up! You know how the Title is this <strong>H U G E</strong> piece of text on the screen that blocks your view right? What if it would be possible to only show the Subtitle? It&#39;s a pretty big text in it&#39;s own right, and it&#39;s not that intrusive.</p><p>Ok, so usually to show a Title and Subtitle you would have to use 2 command in a specific order.<br> First you run the Subtitle command: <code>/title @a subtitle The Hero has won!</code><br> Next you run the Title command: <code>/title @a title Victory</code></p><p>Let&#39;s move those lines inside the <code>.lang</code> file:<br><code>quest1.subtitle=The Hero has won!</code><br><code>quest1.title=Victory</code></p><p>Now let&#39;s use the <code>/titleraw</code> command again:<br><code>/titleraw @a subtitle {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.subtitle&quot;}]}</code><br><code>/titleraw @a title {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.title&quot;}]}</code></p><p>But like I said, I want it all just in the subtitle! Do achieve that I simply put an empty space instead of &quot;Victory&quot;<br><code>quest1.subtitle=Victory! The Hero has won!</code><br><code>quest1.title= </code> &lt;-- that there is an empty space after <code>=</code><br><code>quest1.title=§r</code> if you&#39;re OCD and need to see something there, just put in a reset code. It won&#39;t show anything on screen.</p><p>And now we run the same 2 commands again:<br><code>/titleraw @a subtitle {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.subtitle&quot;}]}</code><br><code>/titleraw @a title {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.title&quot;}]}</code></p><h2 id="using-player-names-with-localization"><a class="header-anchor" href="#using-player-names-with-localization" aria-hidden="true">#</a> Using player names with localization</h2>',19),g=n("Expert"),w=r('<ul><li>Now we&#39;re getting into some really advanced stuff that have to do with scoreboards and selectors. These are features that were introduces in <a href="https://minecraft.gamepedia.com/Bedrock_Edition_1.16.100" target="_blank" rel="noopener noreferrer">Bedrock Edition v1.16.100</a></li></ul><p>So you want to have an NPC that greets you when you get near it. Usually we&#39;d have it say something like <em>&quot;Hey there adventurer! Glad to see you again!&quot;</em>. It has a nice ring to it, but it would be awesome if the NPC would call you by name! So how do we go from that to<br><code>&quot;Hey there &lt;insert player name here&gt;! Glad to see you again!&quot;</code></p><p>First of all we have to prepare the line in the <code>.lang</code> file:<br><code>npcdialogue.guard.msg1=Hey there %1! Glad to see you again!</code><br> Notice how we put <code>%1</code> where we want the NPC to call us by our name.</p><p>Now let&#39;s create the command:<br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.guard.msg1&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@p&quot; }]}}]}</code></p><p>Just like we replaced <code>%1</code> with the new line when we created a book, now we replace it with the name of the closest player by using a <code>selector</code>.</p><p>If we want to go one step further and <strong>make sure</strong> the NPC talks only to the closest player, we run that command from an <code>/execute</code>:<br><code>/execute @e[type=NPC] ~~~ tellraw @p {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.guard.msg1&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@p&quot; }]}}]}</code></p><h2 id="using-scoreboards-with-localization"><a class="header-anchor" href="#using-scoreboards-with-localization" aria-hidden="true">#</a> Using scoreboards with localization</h2><p>And just like that we reached the final form of what can be done with localization! Let&#39;s say you have a friendly competition between a few players. You do some scoreboard magic and manage to find the highest scoring player and record his/her score inside the <code>winner</code> objective. Let&#39;s announce the winner in style! Let&#39;s do it with a Title and Subtitle!</p><p><strong>.lang</strong> file:<br><code>winner.subtitle=They won with %1 points!</code></p><p><strong>Commands:</strong><br><code>/titleraw @a subtitle {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;winner.subtitle&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{&quot;score&quot; : {&quot;name&quot;:&quot;*&quot;,&quot;objective&quot;:&quot;winner&quot;}}]}}]}</code><br><code>/titleraw @a title {&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@e[scores={winner=0..}]&quot; }]}</code></p><p>Since this objective has only 1 player attached to it, notice how we used a wildcard <code>*</code> for selection: <code>&quot;name&quot;:&quot;*&quot;</code>.</p><p>Let&#39;s add to this and paint the name of the player in a bright green!</p><p><strong>.lang</strong> file:<br><code>winner.subtitle=They won with %1 points!</code><br><code>winner.title=§a%1</code></p><p><strong>Commands:</strong><br><code>/titleraw @a subtitle {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;winner.subtitle&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{&quot;score&quot; : {&quot;name&quot;:&quot;*&quot;,&quot;objective&quot;:&quot;winner&quot;}}]}}]}</code><br><code>/titleraw @a title {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;winner.title&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@a[scores={winner=0..}]&quot; }]}}]}</code></p><p>Ok now let&#39;s combine all those commands and do a quick chat message to thank all the players for participating, and also to show them their scores. We&#39;ll use <code>gamescore</code> as our objective name that includes all the players.</p><p><strong>.lang</strong> file:<br><code>players.thankyou.chat=Thank you all for participating %1! These are your scores: %2.</code></p><p><strong>Command:</strong><br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;players.thankyou.chat&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@a[scores={gamescore=0..}]&quot; },{&quot;score&quot; : {&quot;name&quot;:&quot;@a[scores={gamescore=0..}]&quot;,&quot;objective&quot;:&quot;gamescore&quot;}}]}}]}</code></p><p>Notice how we told Minecraft that we have 2 different items we want replaced inside that translation with the help of <code>%1</code> and <code>%2</code>.<br> Also notice how we replaced the wildcard <code>*</code> and went from <code>&quot;name&quot;:&quot;*&quot;</code> to <code>&quot;name&quot;:&quot;@a[scores={gamescore=0..}]&quot;</code> for a more precise(and totally unnecessary) selection.</p><p>So there you have it folks! All you need to know about localization in Minecraft Bedrock Edition. Hope you have a blast renaming stuff for your friends!</p><h2 id="quick-reference"><a class="header-anchor" href="#quick-reference" aria-hidden="true">#</a> Quick reference</h2><ul><li><p><strong>Simple text on a sign:</strong><br><code>sign.house_of_terrors=House of terrors</code><br><code>{&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;sign.house_of_terrors&quot;}]}</code></p></li><li><p><strong>Writing inside a book with new lines:</strong><br><code>book.mystory.page1=Now this is the story all about how%1%1My life got flipped, turned upside down</code><br><code>{&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;book.mystory.page1&quot;,&quot;with&quot;:[&quot;\\n&quot;]}]}</code></p></li><li><p><strong>Text in chat:</strong><br><code>npcdialogue.bob.msg1=Hey there stranger!</code><br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.bob.msg1&quot;}]}</code></p></li><li><p><strong>Actionbar:</strong><br><code>actionbar.status.gamemode=You are now in Survival Mode</code><br><code>/titleraw @a actionbar {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;actionbar.status.gamemode&quot;}]}</code></p></li><li><p><strong>Title and Subtitle:</strong><br><code>quest1.subtitle=The Hero has won!</code><br><code>quest1.title=Victory</code><br><code>/titleraw @a subtitle {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.subtitle&quot;}]}</code><br><code>/titleraw @a title {&quot;rawtext&quot;:[{&quot;translate&quot; : &quot;quest1.title&quot;}]}</code></p></li><li><p><strong>Localization + Player names</strong><br><code>npcdialogue.guard.msg1=Hey there %1! Glad to see you again!</code><br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;npcdialogue.guard.msg1&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@p&quot; }]}}]}</code></p></li><li><p><strong>Localization + Scoreboards + Player names</strong><br><code>players.thankyou.chat=Thank you all for participating %1! These are your scores: %2.</code><br><code>/tellraw @a {&quot;rawtext&quot;:[{&quot;translate&quot;:&quot;players.thankyou.chat&quot;,&quot;with&quot;:{&quot;rawtext&quot;:[{ &quot;selector&quot; : &quot;@a[scores={gamescore=0..}]&quot; },{&quot;score&quot; : {&quot;name&quot;:&quot;@a[scores={gamescore=0..}]&quot;,&quot;objective&quot;:&quot;gamescore&quot;}}]}}]}</code></p></li></ul><h2 id="external-links"><a class="header-anchor" href="#external-links" aria-hidden="true">#</a> External links</h2><ul><li>For more info on the JSON format used, check the <a href="https://minecraft.gamepedia.com/Raw_JSON_text_format" target="_blank" rel="noopener noreferrer">official wiki</a>.</li><li>For more info on <code>.lang</code> file composition/preparation check the <a href="https://compass.minecraft.partners/hc/en-us/articles/360052473054-Preparing-Raw-Text-for-Localization" target="_blank" rel="noopener noreferrer">official Compass</a>.</li><li>For more info on text formatting see the <a href="https://minecraft.gamepedia.com/Formatting_codes" target="_blank" rel="noopener noreferrer">official wiki</a>.</li></ul><h2 id="credits"><a class="header-anchor" href="#credits" aria-hidden="true">#</a> Credits</h2><ul><li>Created by Scai(<a href="https://twitter.com/ScaiQuest" target="_blank" rel="noopener noreferrer">Scai Quest</a>) [2020.Sep.20]</li></ul>',25);l.render=function(n,r,s,l,q,m){const b=e("Label");return t(),o("div",null,[u,a(b,{color:"green"},{default:i((()=>[c])),_:1}),d,a(b,{color:"yellow"},{default:i((()=>[h])),_:1}),p,a(b,{color:"red"},{default:i((()=>[g])),_:1}),w])};export default l;export{s as __pageData};
