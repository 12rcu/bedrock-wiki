import{r as e,o as t,c as a,a as o,w as n,d as r,b as i}from"./404.md.11934eaa.js";const s='{"title":"Beginners Guide","description":"","frontmatter":{"title":"Beginners Guide","tags":["guide"]},"headers":[{"level":2,"title":"What are commands?","slug":"what-are-commands"},{"level":2,"title":"Why commands?","slug":"why-commands"},{"level":2,"title":"Beginning","slug":"beginning"},{"level":2,"title":"Basics","slug":"basics"},{"level":3,"title":"What is a block?","slug":"what-is-a-block"},{"level":3,"title":"What is an entity?","slug":"what-is-an-entity"},{"level":3,"title":"What is the syntax?","slug":"what-is-the-syntax"},{"level":3,"title":"How do I read syntax?","slug":"how-do-i-read-syntax"},{"level":2,"title":"Coordinate Management","slug":"coordinate-management"},{"level":3,"title":"What are coordinates?","slug":"what-are-coordinates"},{"level":3,"title":"What are Tildes?","slug":"what-are-tildes"},{"level":3,"title":"Local Coordinates (Caret Notation)","slug":"local-coordinates-caret-notation"},{"level":2,"title":"Entity Management","slug":"entity-management"},{"level":3,"title":"Deleting an Entity","slug":"deleting-an-entity"},{"level":3,"title":"Targetting","slug":"targetting"},{"level":2,"title":"Execute","slug":"execute"},{"level":2,"title":"Exporting a Map","slug":"exporting-a-map"},{"level":2,"title":"Functions Structure","slug":"functions-structure"}],"relativePath":"commands/beginner-commands.md","lastUpdated":1623442926008}',c={},d=r('<h1 id="beginners-guide-to-commands"><a class="header-anchor" href="#beginners-guide-to-commands" aria-hidden="true">#</a> Beginners Guide to Commands</h1><p><div class="table-of-contents"><ul><li><a href="#what-are-commands">What are commands?</a></li><li><a href="#why-commands">Why commands?</a></li><li><a href="#beginning">Beginning</a></li><li><a href="#basics">Basics</a><ul><li><a href="#what-is-a-block">What is a block?</a></li><li><a href="#what-is-an-entity">What is an entity?</a></li><li><a href="#what-is-the-syntax">What is the syntax?</a></li><li><a href="#how-do-i-read-syntax">How do I read syntax?</a></li></ul></li><li><a href="#coordinate-management">Coordinate Management</a><ul><li><a href="#what-are-coordinates">What are coordinates?</a></li><li><a href="#what-are-tildes">What are Tildes?</a></li><li><a href="#local-coordinates-caret-notation">Local Coordinates (Caret Notation)</a></li></ul></li><li><a href="#entity-management">Entity Management</a><ul><li><a href="#deleting-an-entity">Deleting an Entity</a></li><li><a href="#targetting">Targetting</a></li></ul></li><li><a href="#execute">Execute</a></li><li><a href="#exporting-a-map">Exporting a Map</a></li><li><a href="#functions-structure">Functions Structure</a></li></ul></div></p>',2),l=i("Beginner"),h=r('<p>Written by VideoCarp<br></p><p>Estimated Read Time: 6:58 (minutes)<br> Firstly, since you&#39;re new I recommend <strong>reading to full</strong>.<br><br></p><h2 id="what-are-commands"><a class="header-anchor" href="#what-are-commands" aria-hidden="true">#</a> What are commands?</h2><p>Commands are bits of text that the game Minecraft understands, they can get quite advanced, but they&#39;re <strong>easy</strong> to pick up and learn.<br></p><h2 id="why-commands"><a class="header-anchor" href="#why-commands" aria-hidden="true">#</a> Why commands?</h2><p>Commands are handy. They&#39;re great to work with; even when making addons written in JSON, they can help.<br> Most maps are also made using Minecraft commands.</p><h2 id="beginning"><a class="header-anchor" href="#beginning" aria-hidden="true">#</a> Beginning</h2><p>Firstly I&#39;m going to cover some logic. This is probably the <strong>most important</strong> part. There&#39;s a lot to cover, but I&#39;m mostly going to be covering the beginner&#39;s basics.<br> In Minecraft, there are two types of things, as a summary. Those two things are entities and blocks. You might&#39;ve heard of those a lot, and they&#39;re essential.<br><br></p><h2 id="basics"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><p>Here are some of the basics; read above for a bit of how to read this.</p><h3 id="what-is-a-block"><a class="header-anchor" href="#what-is-a-block" aria-hidden="true">#</a> What is a block?</h3><p>A block is essentially an object that takes up a 1x1 space. An example of a block would be, say, grass, dirt, etc. Everything in the below image is a block, don&#39;t worry about the water just yet.<br></p><p><img src="https://i.ibb.co/TqZjJ4m/FBB40-ECF-D2-F9-476-D-B56-B-1-EAA3-C6-D5-E08.png" alt="grassblock"><br></p><h3 id="what-is-an-entity"><a class="header-anchor" href="#what-is-an-entity" aria-hidden="true">#</a> What is an entity?</h3><p>As I like to think of it, an entity is an object that is not fixed to its position and can take damage. Water isn&#39;t set to its place; is it an entity? No, the reason for that is because water cannot take damage.<br><strong>All mobs, but NOT only mobs</strong> are entities. Below is an example of an entity.<br></p><p><img src="https://i.ibb.co/DGbPNgQ/Webp-net-resizeimage.png" alt="chicken.png"><br></p><br><br> Now that you know what entities and blocks are, that&#39;s a step forward.<br><h3 id="what-is-the-syntax"><a class="header-anchor" href="#what-is-the-syntax" aria-hidden="true">#</a> What is the syntax?</h3><p>A quick explanation I&#39;ll give about syntaxes is that they&#39;re the format of the command if your command doesn&#39;t <br> execute, then there&#39;s a chance it&#39;s that. Give all syntax errors a full read; if they don&#39;t work, take reference<br> from either the wiki, gamepedia, or the <code>/help &lt;command-name&gt;</code> command while in-game.<br> An example of a syntax error is: <code>/kill @ e</code>. That specific one will be raised because there is a space between the <code>@</code> and the <code>e</code>. We&#39;ll go deeper into these <code>@</code> things in a bit. Below is an example of a syntax error. This most likely happened because the person didn&#39;t put an argument afterward, but don&#39;t worry too much.<br><img src="https://i.ibb.co/y590bt1/D20-D2-B44-1-A2-E-4-DF9-BB91-9238320-F5-A4-C.jpg" alt="error example"></p><h3 id="how-do-i-read-syntax"><a class="header-anchor" href="#how-do-i-read-syntax" aria-hidden="true">#</a> How do I read syntax?</h3><p>Here&#39;s a quick summary. It isn&#39;t accurate (I don&#39;t read them and somehow know it):<br> ** Don&#39;t** try to memorize the <code>something: type</code> ones if you don&#39;t understand.<br></p><ul><li><code>&lt;text_here&gt;</code>. These brackets mean that this argument is <strong>required</strong>.</li><li><code>[text_here]</code>. These brackets mean that this argument is <strong>optional</strong>.</li><li><code>(option1 | option2)</code>. These brackets mean that this argument <strong>must be one in the list</strong>.</li><li><code>|</code>. This character in a bracket means&#39;<strong>or</strong> &#39;.</li><li><code>something: int</code>. If <code>: int</code> is after something, that means the argument <strong>must be a whole number</strong>, also known as integers.</li><li><code>something: string</code>. If these are after something, that means the argument <strong>must be text</strong>, also known as string or str.</li><li><code>something: float</code> or <code>something: double</code>. If these are after something, that means the argument <strong>has a decimal place</strong>.</li></ul><h2 id="coordinate-management"><a class="header-anchor" href="#coordinate-management" aria-hidden="true">#</a> Coordinate Management</h2><p>This is a crucial part of commands.</p><h3 id="what-are-coordinates"><a class="header-anchor" href="#what-are-coordinates" aria-hidden="true">#</a> What are coordinates?</h3><p>To put it in my way, coordinates are just the location of an object. But how do you know the coordinates?<br> How are coordinates formatted? Well, regarding both of them, there are three <a href="https://www.dictionary.com/browse/axis" target="_blank" rel="noopener noreferrer">axes</a>, namely X, Y, and Z.<br><strong>How are they formatted?</strong><br> They are formatted in the standard way, <code>x y z</code>, and you&#39;ll see more about those later.<br><strong>How does one get the coordinates of something?</strong><br> It&#39;s quite simple to do this. You <strong>do not need to teleport</strong> yourself. You can run this command:<br><code>/gamerule showcoordinates true</code> and your coordinates should show <strong>at the top left</strong>. Once they&#39;re showing, read the numbers after<br><code>Position</code>. It should look somewhat like this: <code>Position: X, Y, Z</code>. If it doesn&#39;t show exactly like that, don&#39;t panic. X, Y, and Z represent the number. Whatever it is, it is where your legs are. We&#39;ll be getting into<br> tildes on the next section, they will be necessary.</p><h3 id="what-are-tildes"><a class="header-anchor" href="#what-are-tildes" aria-hidden="true">#</a> What are Tildes?</h3><p>Tildes are the <code>~</code> character, which in English means <strong>about</strong>, <strong>near</strong>, or <strong>here</strong>.<br> The same thing goes for coordinates in Minecraft.<br> Each tilde in a command represents where the command is being executed, and math can be done.<br> To add to the coordinate: <code>~&lt;number&gt;</code>. This goes for all X, Y, and Z axes. You can also use <code>~+&lt;number&gt;</code>.<br> To remove from the coordinate: <code>~-&lt;number&gt;</code>. Note the <code>-</code>. This goes for all axes.<br></p><p>Say you want the player to teleport 10 blocks upwards, remember the Y axis is vertical.<br><code>tp &lt;target&gt; ~ ~10 ~</code>.<br> Now, what is <code>target</code>, you may ask. Target means the entity the command is being executed on.<br> This command moves the player 10 blocks up from the command block if one or the person executing it.<br> Don&#39;t worry yet about making the player do it; we&#39;ll cover it now.<br></p><h3 id="local-coordinates-caret-notation"><a class="header-anchor" href="#local-coordinates-caret-notation" aria-hidden="true">#</a> Local Coordinates (Caret Notation)</h3><p>&#39;Caret Notation&#39; is another essential part of Minecraft commands; local coordinates are a bit like tildes. However, it&#39;s based on direction. Here&#39;s a quick summary:</p><ul><li><code>X</code> The X-axis moves player <strong>to the left</strong>.</li><li><code>Y</code> The Y-axis moves player <strong>up</strong>.</li><li><code>Z</code> The Z-axis moves player <strong>forward</strong>.</li></ul><p>You may have thought that not all directions are covered in Caret notation, but really, they are. Tildes and Carets both take <code>+</code> and <code>-</code>, so to go backward, you can teleport the player using <code>^ ^ ^-1</code>, and that will send the player 1 block backward.<br> Adding <code>-</code> in carets will go to the opposite direction of the axis, <code>right</code> and <code>down</code> are done the same way as backward, except with the different coordinate. Both carets and tildes are <code>X Y Z</code> (<code>^ ^ ^</code>).</p><h2 id="entity-management"><a class="header-anchor" href="#entity-management" aria-hidden="true">#</a> Entity Management</h2><p>This section is on how to manage entities. There are a lot of commands that can affect entities, but here I&#39;ll cover the crucial ones.<br></p><h3 id="deleting-an-entity"><a class="header-anchor" href="#deleting-an-entity" aria-hidden="true">#</a> Deleting an Entity</h3><p>It&#39;s effortless to delete an entity. You can simply use the kill command to delete an entity. But what if you wanted to delete a dropped item, or perhaps a specific mob? Below is more info.<br></p><h3 id="targetting"><a class="header-anchor" href="#targetting" aria-hidden="true">#</a> Targetting</h3><p>You can use the target selector argument, which I will be specifying information about right here. You can use the <code>@e</code> targetting, but further than that is what we&#39;ll be focusing on.<br></p><h4 id="target-selectors"><a class="header-anchor" href="#target-selectors" aria-hidden="true">#</a> Target Selectors</h4><p>What are these? Well, I like to explain these as the main argument in selecting which entity to use.<br> A list of each one of them and what they do is below:</p><ul><li><code>@p</code> This selects the nearest player from where the command was executed.</li><li><code>@r</code> This selects a random player in the world who is online.</li><li><code>@s</code> This selects the <strong>entity</strong> that executed the command. All entities, not only players included.</li><li><code>@a</code> This selects all the players.</li><li><code>@e</code> This selects all entities.</li></ul><p>For example, I want a creeper to say <code>Aww man</code> in the chat, I&#39;d use:<br><code>execute @e[type=creeper,name=&quot;creep.er&quot;] ~ ~ ~ say Aww man</code>.<br> You see those things in the <code>[]</code> brackets? They will be covered next.<br></p><p><code>@e[type=&lt;entity_type&gt;</code> will select a specific type of entity, this could be TNT, a dropped item, a specific mob type, etc., it can find any entity type. But what if you wanted a specific entity?<br><code>@e[type=&lt;entity_type&gt;,name=&lt;name&gt;</code>. With that, you&#39;ll find one of a name.<br> I find others doing a widespread issue when they&#39;re getting the name. They usually forget to add quotes after the <code>=</code> sign. If the mob has a space in the name, simply instead of <code>&lt;name&gt;</code>, imagine it becomes <code>&quot; &lt;name&gt;&quot; </code>.<br> The <code>name</code> argument may be ugly, so here is an alternative. This is also a way to group entities. <code>/tag &lt;target&gt; (add | remove) &lt;name: string&gt;</code>.<br> This will add a new group to the targetted entity. After adding it, you can remove the name if there is one.<br> Now <code>string</code> means to add quotes, just like the name in the target selector. In commands and programming, <code>string</code> is just text data, which in most cases are set by <code>&quot; </code>. In Minecraft, use <code>&quot;</code>.<br> An example of a string is: <code>&quot;Hello World!&quot;</code>. In Minecraft, if you wrap with these quotes, you can use any character for any argument, including spaces. You may want to check for the range. Here&#39;s how:<br><code>@e[r=&lt;range number&gt;]</code><br> In most guides, <code>number</code> will be represented as <code>int</code> or <code>integer</code>. They both mean a number. However, an <code>int</code> is not <code>float</code> nor <code>double</code> (if you&#39;re unsure, ignore those two words). It cannot take a decimal value. <code>1.01</code>, for example, is not an integer. An integer is just a whole number.<br></p><h2 id="execute"><a class="header-anchor" href="#execute" aria-hidden="true">#</a> Execute</h2><p><strong>This is an essential section!</strong> This section is fully dedicated to making entities execute a command, think of it as <code>sudo</code>, but for commands.<br> The execute command is the <strong>most powerful</strong> command in the entire game, but don&#39;t worry, it isn&#39;t hard to pick up on. <code>/execute &lt;target&gt; &lt;location&gt; &lt;selected command syntax&gt;</code> is the syntax. <code>&lt;selected command syntax&gt;</code><br> refers to the command you&#39;re getting the entity to execute. I always have my location as <code>~ ~ ~</code> and when it&#39;s<br> like that, it executes anywhere, that&#39;s at least what I use for myself.<br> But what if you wanted to check if someone was on a specific block type?<br><code>execute &lt;target&gt; &lt;position&gt; detect &lt;detectPos&gt; &lt;block_to_detect&gt; &lt;data value&gt; &lt;command&gt;</code>.<br> That would be your syntax. <code>detect</code> isn&#39;t in brackets, this means to just put it there, regardless.<br> Say you wanted a creeper walking on grass to kill nearby ocelots, you&#39;d use this: <code> /execute @e[type=creeper] ~ ~ ~ detect ~ ~-1 ~ grass kill @e[type=ocelot]</code></p><p>Short notice, when stuck, try to use effect, armor stands, tags and names.</p><h2 id="exporting-a-map"><a class="header-anchor" href="#exporting-a-map" aria-hidden="true">#</a> Exporting a Map</h2><p>Visit <a href="https://gist.github.com/VideoCarp/e6ac9264b545580c95f93ce76d12cc71" target="_blank" rel="noopener noreferrer">here</a> to see how to.</p><h2 id="functions-structure"><a class="header-anchor" href="#functions-structure" aria-hidden="true">#</a> Functions Structure</h2><p>Functions are straightforward to make. Here&#39;s a basic folder structure: Functions are a way to import a ton of commands into new worlds easily. Unlike command blocks, however, they cannot be conditional.<br> When you run the <code>function</code> command, it executes the .mcfunction file named by your argument.<br><br> For example, a file named <code>cool_file.mcfunction</code> will execute if you return the argument as <code>cool_file</code> in other words,<br><code>/function cool_file</code>. However, if a different argument is written, the game will search for the <code>.mcfunction</code> file named by that. If none, the command will fail.<br></p><p><code>.mcfunction</code> files are always filled with nothing but commands.<br></p><p>Now for the folder setup.<br></p><p>Function Pack Structure:</p>',57),m=o("div",{markdown:"0",class:"folder-structure"},[o("ul",null,[o("li",null,[o("span",{class:"folder"},"BP"),o("ul",null,[o("li",null,[o("span",{class:"file"},"manifest.json")]),o("li",null,[o("span",{class:"image"},"pack_icon.png")]),o("li",null,[o("span",{class:"folder"},"functions"),o("ul",null,[o("li",null,[o("span",{class:"file"},"filename.mcfunction")]),o("li",null,[o("span",{class:"file"},"tick.json")])])])])])])],-1),u=o("p",null,[i("Here are "),o("a",{href:"https://github.com/VideoCarp/carpcorps/tree/master/function_packs",target:"_blank",rel:"noopener noreferrer"},"some open-source examples"),i(" of basic commands on GitHub.")],-1),g=o("p",null,[i("Learn about "),o("a",{href:"https://wiki.bedrock.dev/concepts/mcfunction#creating-tickjson",target:"_blank",rel:"noopener noreferrer"},"tick.json")],-1);c.render=function(r,i,s,c,p,b){const f=e("Label");return t(),a("div",null,[d,o(f,{color:"green"},{default:n((()=>[l])),_:1}),h,m,u,g])};export default c;export{s as __pageData};
