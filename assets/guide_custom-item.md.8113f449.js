import{r as e,o as s,c as t,a as n,w as a,b as o,d as r}from"./404.md.b20785e6.js";const i='{"title":"Create a custom Item","description":"","frontmatter":{"title":"Create a custom Item","nav_order":5,"prefix":"5."},"headers":[{"level":2,"title":"Behavior code","slug":"behavior-code"},{"level":2,"title":"Resource code","slug":"resource-code"},{"level":2,"title":"Item texture and its shortname","slug":"item-texture-and-its-shortname"},{"level":3,"title":"Texture","slug":"texture"},{"level":3,"title":"Shortnames","slug":"shortnames"},{"level":2,"title":"Final steps","slug":"final-steps"},{"level":2,"title":"Done!","slug":"done"},{"level":2,"title":"Your progress so far:","slug":"your-progress-so-far"}],"relativePath":"guide/custom-item.md","lastUpdated":1631367575250}',p={},c=n("p",null,"This section will walk you through the creation of a simple custom item for our custom entity, the Ghost, to drop. Like blocks and entities, items consist of a BP file (that defines how the item would function/behave) and an RP file (that describes how the item would look)",-1),l=n("h2",{id:"behavior-code"},[n("a",{class:"header-anchor",href:"#behavior-code","aria-hidden":"true"},"#"),o(" Behavior code")],-1),u=n("p",null,[o("Let's start by defining the item's behaviors in the BP. Create a folder called "),n("code",null,"items"),o(" in your BP directory, then create a file called "),n("code",null,"ectoplasm.json"),o(" inside.")],-1),d=o("BP/items/ectoplasm.json"),m=r('<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n\t<span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.10&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;minecraft:item&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wiki:ectoplasm&quot;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token property">&quot;components&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">&quot;minecraft:max_stack_size&quot;</span><span class="token operator">:</span> <span class="token number">16</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Let&#39;s break up the code first:</p><ul><li><code>&quot;format_version&quot;</code> defines what format the file uses. Weâ€™ll be using 1.10 because that&#39;s the current most recent version for items.</li><li><code>&quot;minecraft:item&quot;</code> contains all of the item&#39;s server-side data: <ul><li><code>&quot;identifier&quot;</code> in <code>&quot;description&quot;</code> is a name unique to this item. It should contain no upper-case letters, and <code>_</code> should be used instead of spaces. An identifier consists of two parts: a <em>namespace</em> (before the <code>:</code>) and the <em>id</em> (after the <code>:</code>). The <em>namespace</em> should be the same in all files of the same add-on. Usually, either the author&#39;s initials or an abbreviation of the pack name is used as one. In our case, <code>wiki</code> is a short enough word to be used as well. The <em>id</em> is the item&#39;s own name. All vanilla items use <code>minecraft</code> as their namespace, but one CANNOT use that or <code>minecon</code> as the namespace in an add-on. The most usual way to encounter an identifier is using the <code>/give</code> command in-game: for example, to acquire our Ectoplasm, you&#39;d have to type <code>/give @s wiki:ectoplasm</code>.</li><li><code>&quot;components&quot;</code> is where all the data about the item&#39;s behavior is stored. There are a lot of different components for items, blocks, and entities each, but since Ectoplasm is very simple, we only need one, which is: <ul><li>&quot;<code>minecraft:max_stack_size</code>&quot; takes an integer (<code>16</code> in this case) for its value, but some other components might take JSON objects (<code>{}</code>). You can experiment by setting the max stack size value anywhere between 1 and 64. For example, a Diamond Sword would have it as 1, an Ender Pearl as 16.</li></ul></li></ul></li></ul><p>For more information on components, you can always refer to the documentation on <a href="https://bedrock.dev/r/Item" target="_blank" rel="noopener noreferrer">bedrock.dev/r/Item</a>.</p><p>If you were to open a world with the add-on now, the item would already be in-game, but it would be invisible since we haven&#39;t defined how it should look yet: let&#39;s do it now.</p><h2 id="resource-code"><a class="header-anchor" href="#resource-code" aria-hidden="true">#</a> Resource code</h2><p>Now let&#39;s create a folder called <code>items</code> and a file called <code>ectoplasm.json</code> in your RP repository, exactly like we did for <code>BP</code>.</p><p>However, this time the code is slightly different:</p>',8),h=o("RP/items/ectoplasm.json"),b=r('<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n\t<span class="token property">&quot;format_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.10&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;minecraft:item&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wiki:ectoplasm&quot;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token property">&quot;category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Items&quot;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token property">&quot;components&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">&quot;minecraft:icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wiki.ectoplasm&quot;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>As you can see, we used the same identifier (<code>namespace:id</code>), since we are referencing the same item.</p><ul><li><code>&quot;category&quot;</code> in <code>&quot;description&quot;</code> defines in which tab of the creative inventory the item would show up. There are four tabs to choose from: <code>&quot;Nature&quot;</code>, <code>&quot;Equipment&quot;</code>, <code>&quot;Construction&quot;</code> and <code>&quot;Items&quot;</code>.</li><li>The only RP component we need right now is <code>&quot;minecraft:icon&quot;</code>, which, of course, references the item&#39;s texture; we&#39;ll get to that in just a moment. (There are a few other item RP components we&#39;ll look into in the future, like <code>&quot;minecraft:use_animation&quot;</code>, which defines the animation that would play when the item is used, like <code>&quot;eat&quot;</code> for food items.) The component&#39;s value. <code>&quot;wiki.ectoplasm&quot;</code> is the item texture&#39;s <em>shortname</em>, which brings us to our next section.</li></ul><h2 id="item-texture-and-its-shortname"><a class="header-anchor" href="#item-texture-and-its-shortname" aria-hidden="true">#</a> Item texture and its shortname</h2><h3 id="texture"><a class="header-anchor" href="#texture" aria-hidden="true">#</a> Texture</h3><p>Navigate to <code>RP/textures/items/</code>, creating subdirectories as needed: this is where your item textures will be stored. It&#39;s best to name your texture image files with the items&#39; <em>id</em>, which is why the texture of Ectoplasm is called <code>ectoplasm.png</code>.</p><p><code>RP/textures/items/ectoplasm.png</code></p><p><img src="https://raw.githubusercontent.com/Bedrock-OSS/wiki-addon/86b0380310d3d5748a43a4be1f93d4c59668e4bf/guide/guide_RP/textures/items/ectoplasm.png" alt="ectoplasm.png"></p><h3 id="shortnames"><a class="header-anchor" href="#shortnames" aria-hidden="true">#</a> Shortnames</h3><p>Finally, we need to tell the game that an exact texture file belongs to a specific custom item. In Ectoplasm&#39;s RP file, we already defined its icon as <code>&quot;wiki.ectoplasm&quot;</code>. Now we have to establish a connection between this <em>shortname</em> and the texture file <code>ectoplasm.png</code> This is done through the <code>item_texture.json</code> file, located in <code>RP/textures/</code>. Its base code is this:</p>',10),k=o("RP/textures/item_texture.json"),f=r('<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n\t<span class="token property">&quot;resource_pack_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ghostly Guide&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;texture_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;atlas.items&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;texture_data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>&quot;resource_pack_name&quot;</code> is quite self-explanatory: it&#39;s the RP name string;</li><li><code>&quot;texture_data&quot;</code> is an object where each item shortname is defined - for Ectoplasm, we need to pu this code snippet inside of it:</li></ul>',2),q=o("RP/textures/item_texture.json/texture_data"),_=r('<div class="language-json line-numbers-mode"><pre><code><span class="token property">&quot;wiki.ectoplasm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;textures&quot;</span><span class="token operator">:</span> <span class="token string">&quot;textures/items/ectoplasm&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This snippet tells the game that by typing <code>&quot;wiki.ectoplasm&quot;</code> in our add-on, you mean the <em>texture</em> located in <code>textures/items/</code> and called <code>ectoplasm</code>. You do not need the <code>.png</code> extension here.</p><p>After you add the snippet in, <code>item_texture.json</code> should look like this:</p>',3),g=o("RP/textures/item_texture.json"),w=r('<div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>\n\t<span class="token property">&quot;resource_pack_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ghostly Guide&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;texture_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;atlas.items&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;texture_data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token property">&quot;wiki.ectoplasm&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token property">&quot;textures&quot;</span><span class="token operator">:</span> <span class="token string">&quot;textures/items/ectoplasm&quot;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="final-steps"><a class="header-anchor" href="#final-steps" aria-hidden="true">#</a> Final steps</h2><p>The last thing to do is to give your item a name to show up in the toolbar. You should already have the text file <code>RP/texts/en_US.lang</code>. Add this line to it:</p>',3),y=o("RP/texts/en_US.lang"),v=r('<div class="language-"><pre><code>item.wiki:ectoplasm.name=Ectoplasm\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="done"><a class="header-anchor" href="#done" aria-hidden="true">#</a> Done!</h2><p>Now your first custom item, Ectoplasm, is complete! If everything has been done correctly, the item should now be obtainable through the <code>/give</code> command in-game, as well as appearing in your creative inventory. If you&#39;re having some trouble, check the <a href="/items/troubleshooting-items.html">Troubleshooting page</a>. If that doesn&#39;t help, compare your results with the <a href="https://github.com/Bedrock-OSS/wiki-addon/tree/main/guide" target="_blank" rel="noopener noreferrer">example files</a>.</p><h2 id="your-progress-so-far"><a class="header-anchor" href="#your-progress-so-far" aria-hidden="true">#</a> Your progress so far:</h2><p><strong>What you&#39;ve done:</strong></p><ul><li>[x] Setup your pack;</li><li>[x] Create a custom item;</li></ul><p><strong>What are you to do next:</strong></p><ul><li>[ ] Create a custom entity;</li><li>[ ] Create the entity&#39;s loot, spawn rules, and a custom recipe;</li></ul>',8);p.render=function(o,r,i,p,x,T){const P=e("CodeHeader");return s(),t("div",null,[c,l,u,n(P,null,{default:a((()=>[d])),_:1}),m,n(P,null,{default:a((()=>[h])),_:1}),b,n(P,null,{default:a((()=>[k])),_:1}),f,n(P,null,{default:a((()=>[q])),_:1}),_,n(P,null,{default:a((()=>[g])),_:1}),w,n(P,null,{default:a((()=>[y])),_:1}),v])};export default p;export{i as __pageData};
