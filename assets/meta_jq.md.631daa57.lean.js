import{r as e,o as t,c as a,a as n,d as i,b as o}from"./404.md.f5f33757.js";const r='{"title":"Building and Editing JSON with jq","description":"","frontmatter":{"title":"Building and Editing JSON with jq"},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Getting jq","slug":"getting-jq"},{"level":2,"title":"Defining Syntax","slug":"defining-syntax"},{"level":3,"title":"The Dot","slug":"the-dot"},{"level":3,"title":"Paths","slug":"paths"},{"level":3,"title":"Array Access","slug":"array-access"},{"level":3,"title":"Editing Values","slug":"editing-values"},{"level":3,"title":"The Pipe","slug":"the-pipe"},{"level":3,"title":"Logical Operations","slug":"logical-operations"},{"level":3,"title":"Variables","slug":"variables"},{"level":2,"title":"Builtin Functions","slug":"builtin-functions"},{"level":3,"title":"Syntax","slug":"syntax"},{"level":3,"title":"Math","slug":"math"},{"level":3,"title":"Map and Map Values","slug":"map-and-map-values"},{"level":3,"title":"To and From Entries","slug":"to-and-from-entries"},{"level":3,"title":"Walk","slug":"walk"},{"level":3,"title":"Further Reading","slug":"further-reading"},{"level":2,"title":"Defining Custom Functions","slug":"defining-custom-functions"},{"level":2,"title":"Command Line Use","slug":"command-line-use"},{"level":2,"title":"Bringing It All Together","slug":"bringing-it-all-together"}],"relativePath":"meta/jq.md","lastUpdated":1625084369385}',s={},l=i('',12),d=n("h3",{id:"paths"},[n("a",{class:"header-anchor",href:"#paths","aria-hidden":"true"},"#"),o(" Paths")],-1),u=n("p",null,[o("Here, we see that our "),n("code",null,"."),o(" filter returns what we expected: the entire JSON file. Now, let's say we wanted to return some specific part of the JSON file, the header UUID, for example. We would then construct a filter that contains the full path to that value. In this case, that would be "),n("code",null,".header.uuid"),o(". Let's see that in action:")],-1),h=n("h3",{id:"array-access"},[n("a",{class:"header-anchor",href:"#array-access","aria-hidden":"true"},"#"),o(" Array Access")],-1),c=n("p",null,[o("We can access arrays in jq similarly to how we would in other languages. Let's say we wanted to return the last number in our minimum engine version array. We would construct the following filter: "),n("code",null,".header.min_engine_version[-1]"),o(". Note that, of course, we could also specify the positive position 2 if we always wanted to return to the second position. Simply using empty brackets, "),n("code",null,".[]"),o(", will return all array elements in a line separated list. Feel free to play around with this and learn the basics:")],-1),f=n("h3",{id:"editing-values"},[n("a",{class:"header-anchor",href:"#editing-values","aria-hidden":"true"},"#"),o(" Editing Values")],-1),p=n("p",null,[o("Now let's get into the real meat of jq and start manipulating our JSON data. The way we do this is with the plain assignment operator ("),n("code",null,"="),o("). There are a few variants of this operator, referred to as update-assignment operators, such as "),n("code",null,"|="),o(" and "),n("code",null,"+="),o(", which you can read more about in jq's official "),n("a",{href:"https://stedolan.github.io/jq/manual/#Assignment",target:"_blank",rel:"noopener noreferrer"},"manual"),o(", and experiment within the example below:")],-1),m=n("h3",{id:"the-pipe"},[n("a",{class:"header-anchor",href:"#the-pipe","aria-hidden":"true"},"#"),o(" The Pipe")],-1),g=n("p",null,[o("Similar to UNIX command-line interfaces, jq makes use of the pipe, "),n("code",null,"|"),o(". When you use the pipe character, you are essentially telling jq to take the result of your filter on the left of the pipe and run it through the filter to the pipe's right. Let's go back to our array access example, except this time. We will output the entire array apply some filter to the output array. We'll use jq's built-in map function to demonstrate this, which is a handy function as it can be used to apply a specified filter to every value in an input array. We'll add 1 to each value in the minimum engine version array:")],-1),y=i('',3),v=i('',3),w=n("h3",{id:"variables"},[n("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),o(" Variables")],-1),b=n("p",null,[o("Variables can be defined anywhere in filter. When a variable is defined, it is valid for use anywhere downstream in the pipe from where it was initially defined. They are defined in the form: "),n("code",null,".input as $var | $var"),o(", which would effectively return "),n("code",null,".input"),o(". Any valid JSON type can also serve as an input, such as objects, arrays, strings, and numbers. Take the simple example:")],-1),A=n("h2",{id:"builtin-functions"},[n("a",{class:"header-anchor",href:"#builtin-functions","aria-hidden":"true"},"#"),o(" Builtin Functions")],-1),_=n("h3",{id:"syntax"},[n("a",{class:"header-anchor",href:"#syntax","aria-hidden":"true"},"#"),o(" Syntax")],-1),C=n("p",null,[o("jq comes with a variety of built-in functions. We've already encountered the function "),n("code",null,"map"),o(" while explaining the pipe. One thing of note regarding jq functions is that their syntax differs depending on the number of arguments they take. Multi-argument functions will take their values enclosed in parentheses and separated by semicolons. In contrast, for single-argument functions, the input is piped in. Take the example below, in which we use the multi-argument function pow to raise the format version to the third power, while we also use the single argument function sqrt to find the square root of the format version. In this example, you'll also note that we introduce the concept of building an entirely new JSON structure within our jq filter. This is extremely useful in situations where we'd like to reshape some input files somehow. It's always important to keep in mind that any valid JSON is valid anywhere in a jq filter:")],-1),D=i('',4),B=n("h3",{id:"to-and-from-entries"},[n("a",{class:"header-anchor",href:"#to-and-from-entries","aria-hidden":"true"},"#"),o(" To and From Entries")],-1),q=n("p",null,[o("The function "),n("code",null,"to_entries"),o(" is a useful single argument jq builtin that is helpful when we'd like to rearrange keys and values. Let's say we wanted to invert all the key/value pairs in the header. Using "),n("code",null,"to_entries"),o(', we\'ll construct an array of all key-value pairs in the header, reformatted as objects, and assigned "key" or "value" to reference them later. To understand how this function works, it\'s important to see what this intermediate looks like. Note that this can also be reversed by appending '),n("code",null,"from_entries"),o(":")],-1),j=n("p",null,[o("Now, we'll use "),n("code",null,"map"),o(" to iterate through each array entry, and finally, we'll introduce a new function, add. This single-argument function will take the array of objects output by "),n("code",null,"map"),o(" and essentially move them up one level to again exist as key-value pairs under the header. We'll also need to convert all our values to strings so they can serve as keys. We'll use the single-argument function "),n("code",null,"tostring"),o(". Note that "),n("code",null,"tonumber"),o(" is the inverse of this:")],-1),k=i('',2),T=i('',4),x=i('',12);s.render=function(i,o,r,s,S,I){const N=e("JQEmbed");return t(),a("div",null,[l,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=."}),d,u,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=.header.uuid"}),h,c,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=.header.min_engine_version[-1]"}),f,p,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=.format_version%20%3D%203"}),m,g,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=.header.min_engine_version%20%7C%20map%28.%20%2B%201%29"}),y,n(N,{content:"199ed596c0f7158cdb7d2da8510690c5?query=if%20.format_version%20>%201%20then%20.header.description%20%3D%20%22Big%20Format%22%20else%20.%20end"}),v,n(N,{content:"199ed596c0f7158cdb7d2da8510690c5?query=if%20%28.header.version%5B0%5D%20>%201%20and%20.modules%5B0%5D.version%5B0%5D%20>%201%20%7C%20not%29%20%0A%0Athen%20.header.description%20%3D%20%22Little%20Version%22%20else%20.%20end"}),w,b,n(N,{content:"f99c7ad63286e1813cebc4a6dac1df1d?query=%7B%22hello%22%3A%20%22world%22%7D%20as%20%24var%20%7C%20%24var%20%7C%20.hello&slurp=true"}),A,_,C,n(N,{content:"c35537fac79dfd77cd89551b7487abed?query=%7B%0A%20%20%22multi-argument%22%3A%20pow%28.format_version%3B%203%29%2C%0A%20%20%22single-argument%22%3A%20.format_version%20%7C%20sqrt%0A%7D"}),D,n(N,{content:"199ed596c0f7158cdb7d2da8510690c5?query=.header%20as%20%24header%20%7C%0A.header%20%3D%20%28%24header%20%7C%20map_values%28%28select%28type%20%3D%3D%20%22string%22%29%20%7C%20gsub%28%22Example%22%3B%20%22Production%22%29%29%29%29%20%2B%20%28%24header%20%7C%20map_values%28select%28type%20!%3D%20%22string%22%29%29%29"}),B,q,n(N,{content:"199ed596c0f7158cdb7d2da8510690c5?query=.header%20%7C%20to_entries"}),j,n(N,{content:"199ed596c0f7158cdb7d2da8510690c5?query=.header%20%3D%20%28.header%20%7C%20to_entries%20%7C%20map%28%7B%28.value%20%7C%20tostring%29%3A%20.key%7D%29%20%7C%20add%29"}),k,n(N,{content:"ef243c5bcf9cfedf561f351b34947f76?query=walk%28if%20type%20%3D%3D%20%22object%22%20then%20with_entries%28select%28.value%20!%3D%20null%29%29%20else%20.%20end%29"}),T,n(N,{content:"938c5245d17516df7cf8f46c9fd6a525?query=def%20test_func%28%24input1%3B%20%24input2%29%3A%0A%28%24input1%20%2B%20%24input2%29%0A%3B%0A%0Adef%20no_input%3A%0A%281%20%2B%201%29%0A%3B%0A%0A%7B%28test_func%28%22combined%22%3B%20%22Strings%22%29%29%3A%20%28no_input%29%7D"}),x])};export default s;export{r as __pageData};
